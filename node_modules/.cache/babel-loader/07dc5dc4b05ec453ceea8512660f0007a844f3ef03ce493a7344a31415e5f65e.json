{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ibrahim.alisan\\\\2025 vcb son\\\\my-website\\\\src\\\\components\\\\HedefNisbetPage.tsx\";\nimport React from 'react';\nimport { Container, Typography, Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HedefNisbetPage({\n  rows\n}) {\n  // Verileri kişilere ve günlere göre gruplama\n  // Personeli tekil olarak belirlemek için sadece personelNo'yu kullanıyoruz.\n  const personelMap = new Map();\n  const tarihler = [];\n\n  // Verileri personelNo ve tarihe göre grupla ve günleri belirle\n  rows.forEach(row => {\n    const personelId = row[0]; // Firebase ID (şimdilik sadece bilgi amaçlı saklanıyor)\n    const personelNo = row[1]; // PersonelNO (gruplama anahtarı)\n    const personelAdSoyad = row[3]; // AD SOYAD\n    const hedefNisbeti = row[7]; // HEDEF NİSBETİ\n    const tarih = row[8]; // Tarih\n\n    // Personel için benzersiz anahtar olarak personelNo'yu kullanalım\n    const personelKey = personelNo; // Gruplama anahtarı\n\n    if (!personelMap.has(personelKey)) {\n      personelMap.set(personelKey, {\n        id: personelId,\n        personelNo: personelNo,\n        ad: personelAdSoyad,\n        nisbetler: []\n      });\n    }\n    if (tarih && !tarihler.includes(tarih)) {\n      tarihler.push(tarih);\n    }\n  });\n  tarihler.sort(); // Tarihleri sırala\n  const gunSayisi = tarihler.length;\n\n  // Her personelin her gününe ait hedef nisbeti değerlerini doğru sütunlara yerleştir\n  rows.forEach(row => {\n    const personelNo = row[1]; // PersonelNO (gruplama anahtarı)\n    const hedefNisbeti = row[7];\n    const tarih = row[8];\n    const personelKey = personelNo; // Gruplama anahtarı\n    const gunIndex = tarihler.indexOf(tarih);\n    if (personelMap.has(personelKey) && gunIndex !== -1) {\n      const personelData = personelMap.get(personelKey);\n      // Nisbetler dizisinin boyutunu gün sayısına eşitleyin ve varsayılan değer atayın\n      while (personelData.nisbetler.length < gunSayisi) {\n        personelData.nisbetler.push(''); // Olmayan günler için boş değer atayın\n      }\n      personelData.nisbetler[gunIndex] = hedefNisbeti || '';\n    }\n  });\n\n  // Son iki günün yüzde farkını hesapla\n  const sonIkiGunFarklari = new Map();\n  personelMap.forEach((personel, key) => {\n    if (personel.nisbetler.length >= 2) {\n      const sonGun = parseFloat(personel.nisbetler[personel.nisbetler.length - 1].replace('%', '').replace(',', '.')) || 0;\n      const oncekiGun = parseFloat(personel.nisbetler[personel.nisbetler.length - 2].replace('%', '').replace(',', '.')) || 0;\n      const fark = sonGun - oncekiGun;\n      sonIkiGunFarklari.set(key, fark);\n    }\n  });\n\n  // Tablo başlıklarını oluştur: AD SOYAD ve günler\n  const tableHeaders = ['AD SOYAD', 'PersonelNO',\n  // PersonelNO'yu da gösterelim\n  ...tarihler.map((tarih, index) => `${index + 1}. Gün (${tarih})`)];\n  const sortedPersonnel = Array.from(personelMap.values()).sort((a, b) => a.ad.localeCompare(b.ad));\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    sx: {\n      mt: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: {\n          xs: 1,\n          sm: 3\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        sx: {\n          fontSize: {\n            xs: 20,\n            sm: 24,\n            md: 32\n          },\n          mb: {\n            xs: 2,\n            sm: 3\n          }\n        },\n        children: \"G\\xFCnl\\xFCk Hedef Nisbeti\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        component: Paper,\n        sx: {\n          overflowX: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: tableHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n                children: header\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: sortedPersonnel.map(personel => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(TableCell, {\n                children: personel.ad\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: personel.personelNo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this), \" \", Array.from({\n                length: gunSayisi\n              }).map((_, gunIndex) =>\n              /*#__PURE__*/\n              // Nisbetler dizisinin boyutunu kontrol ederek güvenli erişim sağlayın\n              _jsxDEV(TableCell, {\n                children: personel.nisbetler[gunIndex] || ''\n              }, gunIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 21\n              }, this))]\n            }, personel.personelNo, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_c = HedefNisbetPage;\nexport default HedefNisbetPage;\nvar _c;\n$RefreshReg$(_c, \"HedefNisbetPage\");","map":{"version":3,"names":["React","Container","Typography","Box","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","jsxDEV","_jsxDEV","HedefNisbetPage","rows","personelMap","Map","tarihler","forEach","row","personelId","personelNo","personelAdSoyad","hedefNisbeti","tarih","personelKey","has","set","id","ad","nisbetler","includes","push","sort","gunSayisi","length","gunIndex","indexOf","personelData","get","sonIkiGunFarklari","personel","key","sonGun","parseFloat","replace","oncekiGun","fark","tableHeaders","map","index","sortedPersonnel","Array","from","values","a","b","localeCompare","maxWidth","sx","mt","children","p","xs","sm","variant","gutterBottom","fontSize","md","mb","fileName","_jsxFileName","lineNumber","columnNumber","component","overflowX","header","_","_c","$RefreshReg$"],"sources":["C:/Users/ibrahim.alisan/2025 vcb son/my-website/src/components/HedefNisbetPage.tsx"],"sourcesContent":["import React from 'react';\nimport { Container, Typography, Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\n\ntype TableRowType = string[];\n\nfunction HedefNisbetPage({ rows }: { rows: TableRowType[] }) {\n  // Verileri kişilere ve günlere göre gruplama\n  // Personeli tekil olarak belirlemek için sadece personelNo'yu kullanıyoruz.\n  const personelMap = new Map<string, { id: string; personelNo: string; ad: string; nisbetler: string[] }>();\n  const tarihler: string[] = [];\n\n  // Verileri personelNo ve tarihe göre grupla ve günleri belirle\n  rows.forEach((row) => {\n    const personelId = row[0]; // Firebase ID (şimdilik sadece bilgi amaçlı saklanıyor)\n    const personelNo = row[1]; // PersonelNO (gruplama anahtarı)\n    const personelAdSoyad = row[3]; // AD SOYAD\n    const hedefNisbeti = row[7]; // HEDEF NİSBETİ\n    const tarih = row[8]; // Tarih\n\n    // Personel için benzersiz anahtar olarak personelNo'yu kullanalım\n    const personelKey = personelNo; // Gruplama anahtarı\n\n    if (!personelMap.has(personelKey)) {\n      personelMap.set(personelKey, { id: personelId, personelNo: personelNo, ad: personelAdSoyad, nisbetler: [] });\n    }\n\n    if (tarih && !tarihler.includes(tarih)) {\n      tarihler.push(tarih);\n    }\n  });\n\n  tarihler.sort(); // Tarihleri sırala\n  const gunSayisi = tarihler.length;\n\n  // Her personelin her gününe ait hedef nisbeti değerlerini doğru sütunlara yerleştir\n  rows.forEach(row => {\n    const personelNo = row[1]; // PersonelNO (gruplama anahtarı)\n    const hedefNisbeti = row[7];\n    const tarih = row[8];\n    const personelKey = personelNo; // Gruplama anahtarı\n    const gunIndex = tarihler.indexOf(tarih);\n\n    if (personelMap.has(personelKey) && gunIndex !== -1) {\n      const personelData = personelMap.get(personelKey)!;\n      // Nisbetler dizisinin boyutunu gün sayısına eşitleyin ve varsayılan değer atayın\n      while (personelData.nisbetler.length < gunSayisi) {\n          personelData.nisbetler.push(''); // Olmayan günler için boş değer atayın\n      }\n      personelData.nisbetler[gunIndex] = hedefNisbeti || '';\n    }\n  });\n\n  // Son iki günün yüzde farkını hesapla\n  const sonIkiGunFarklari = new Map<string, number>();\n  personelMap.forEach((personel, key) => {\n    if (personel.nisbetler.length >= 2) {\n      const sonGun = parseFloat(personel.nisbetler[personel.nisbetler.length - 1].replace('%', '').replace(',', '.')) || 0;\n      const oncekiGun = parseFloat(personel.nisbetler[personel.nisbetler.length - 2].replace('%', '').replace(',', '.')) || 0;\n      const fark = sonGun - oncekiGun;\n      sonIkiGunFarklari.set(key, fark);\n    }\n  });\n\n  // Tablo başlıklarını oluştur: AD SOYAD ve günler\n  const tableHeaders = [\n    'AD SOYAD',\n    'PersonelNO', // PersonelNO'yu da gösterelim\n    ...tarihler.map((tarih, index) => `${index + 1}. Gün (${tarih})`)\n  ];\n\n  const sortedPersonnel = Array.from(personelMap.values()).sort((a, b) => a.ad.localeCompare(b.ad));\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\n      <Box sx={{ p: { xs: 1, sm: 3 } }}>\n        <Typography variant=\"h4\" gutterBottom sx={{ fontSize: { xs: 20, sm: 24, md: 32 }, mb: { xs: 2, sm: 3 } }}>\n          Günlük Hedef Nisbeti\n        </Typography>\n        <TableContainer component={Paper} sx={{ overflowX: 'auto' }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {tableHeaders.map((header, index) => (\n                  <TableCell key={index}>{header}</TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {sortedPersonnel.map((personel) => (\n                <TableRow key={personel.personelNo}> {/* Key olarak personelNo kullanmak daha uygun olabilir */}\n                  <TableCell>{personel.ad}</TableCell>\n                  <TableCell>{personel.personelNo}</TableCell> {/* PersonelNO sütunu */}\n                  {/* Her gün için hedef nisbeti değerlerini göster */}\n                  {Array.from({ length: gunSayisi }).map((_, gunIndex) => (\n                     // Nisbetler dizisinin boyutunu kontrol ederek güvenli erişim sağlayın\n                    <TableCell key={gunIndex}>{personel.nisbetler[gunIndex] || ''}</TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n    </Container>\n  );\n}\n\nexport default HedefNisbetPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}